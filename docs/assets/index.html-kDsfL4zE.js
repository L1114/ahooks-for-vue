import{_ as t,o as e,c as a,d as n}from"./app-MDcXVWpp.js";const d={},s=n(`<h1 id="useeventlistener" tabindex="-1"><a class="header-anchor" href="#useeventlistener" aria-hidden="true">#</a> useEventListener</h1><p>优雅的使用 addEventListener。</p><h2 id="代码演示" tabindex="-1"><a class="header-anchor" href="#代码演示" aria-hidden="true">#</a> 代码演示</h2><h3 id="基础用法" tabindex="-1"><a class="header-anchor" href="#基础用法" aria-hidden="true">#</a> 基础用法</h3><code src="./demo/demo1.tsx"></code><h3 id="监听-keydown-事件" tabindex="-1"><a class="header-anchor" href="#监听-keydown-事件" aria-hidden="true">#</a> 监听 keydown 事件</h3><code src="./demo/demo2.tsx"></code><h2 id="api" tabindex="-1"><a class="header-anchor" href="#api" aria-hidden="true">#</a> API</h2><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token function">useEventListener</span><span class="token punctuation">(</span>
  eventName<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>
  <span class="token function-variable function">handler</span><span class="token operator">:</span> <span class="token punctuation">(</span>ev<span class="token operator">:</span> Event<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">,</span>
  options<span class="token operator">?</span><span class="token operator">:</span> Options<span class="token punctuation">,</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="params" tabindex="-1"><a class="header-anchor" href="#params" aria-hidden="true">#</a> Params</h3><table><thead><tr><th>参数</th><th>说明</th><th>类型</th><th>默认值</th></tr></thead><tbody><tr><td>eventName</td><td>事件名称</td><td><code>string</code></td><td>-</td></tr><tr><td>handler</td><td>处理函数</td><td><code>(ev: Event) =&gt; void</code></td><td>-</td></tr><tr><td>options</td><td>设置(可选)</td><td><code>Options</code></td><td>-</td></tr></tbody></table><h3 id="options" tabindex="-1"><a class="header-anchor" href="#options" aria-hidden="true">#</a> Options</h3><table><thead><tr><th>参数</th><th>说明</th><th>类型</th><th>默认值</th></tr></thead><tbody><tr><td>target</td><td>DOM 节点或者 ref</td><td><code>(() =&gt; Element)</code> | <code>Element</code> | <code>React.MutableRefObject&lt;Element&gt;</code> | <code>Window</code> | <code>Document</code></td><td><code>window</code></td></tr><tr><td>capture</td><td>可选项，listener 会在该类型的事件捕获阶段传播到该 EventTarget 时触发。</td><td><code>boolean</code></td><td><code>false</code></td></tr><tr><td>once</td><td>可选项，listener 在添加之后最多只调用一次。如果是 true，listener 会在其被调用之后自动移除。</td><td><code>boolean</code></td><td><code>false</code></td></tr><tr><td>passive</td><td>可选项，设置为 true 时，表示 listener 永远不会调用 preventDefault() 。如果 listener 仍然调用了这个函数，客户端将会忽略它并抛出一个控制台警告。</td><td><code>boolean</code></td><td><code>false</code></td></tr></tbody></table>`,13),o=[s];function r(c,i){return e(),a("div",null,o)}const p=t(d,[["render",r],["__file","index.html.vue"]]);export{p as default};
